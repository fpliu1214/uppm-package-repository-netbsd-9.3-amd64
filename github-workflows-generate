#!/bin/sh

set -e

if [ -d ppkg-formula-repository-official-core ] ; then
    git -C ppkg-formula-repository-official-core pull
else
    git clone --depth=1 https://github.com/leleliu008/ppkg-formula-repository-official-core
fi

cd ppkg-formula-repository-official-core/formula

ls *.yml | sed 's|\.yml$||' | sort | uniq > a

sed -n '/^dep-pkg:/p' *.yml | cut -c10- | tr ' ' '\n' | sort | uniq > b

SED="sed -e s|^-||"

for item in anchor-cli aom argparse arping autogen autossh azcopy bandwhich brpc boringssl bottom cmake ccache code-cli ctop cpuid cpu_features dolt docbook dua duf e2fsprogs effcee exiv2 fakeroot fnm fortune fsmon g gf gn getopt geographiclib gcc gcc@12 gdb glew gotop ideviceinstaller incus itstool jackaudio jfrog-cli k9s libirecovery libcaf libdecor lief lima libquiche llvm@14 llvm@15 llvm@16 llvm@17 llvm@18 procs ranger shellcheck srs srt suricata tdu test tectonic timg volta watchman xbps ycm zig dot_static libclc mcfly glslviewer wolfssl wuzz libpq libzlog zlog-chk-conf lsof tbox xmake six lunatic lnd libusrsctp libopenh264 libphysfs physfs librist tcl-core libwasmtime wasmtime wasmer
do
    SED="$SED -e /^$item$/d"
done

echo "SED=$SED"

PKGS="$(diff -U 0 a b | sed '/^--/d' | grep '^-' | $SED)"

PKGS_COUNT="$(printf "$PKGS" | wc -l)"
PKGS_COUNT="$(($PKGS_COUNT + 1))"

echo "PKGS_COUNT=$PKGS_COUNT"

cd -

cat > .github/workflows/publish.yml <<EOF
name: publish

on:
  workflow_dispatch

jobs:
EOF

unset ITEMS
unset NEEDS

I=0
J=0
K=0

for item in $PKGS
do
    if [ -z "$ITEMS" ] ; then
        ITEMS="$item"
    else
        ITEMS="$ITEMS, $item"
    fi

    K=$(($K + 1))

    J=$(($J + 1))

    echo "J=$J"
    echo "K=$K"

    if [ "$J" = 128 ] || [ "$K" = "$PKGS_COUNT" ] ; then
        J=0
        I=$(($I + 1))

        cat >> .github/workflows/publish.yml <<EOF

  build$I:
    strategy:
      fail-fast: false
      matrix:
        pkg: [$ITEMS]

    runs-on: ubuntu-latest

    steps:
      - run: curl -LO https://curl.se/ca/cacert.pem

      - uses: cross-platform-actions/action@v0.25.0
        with:
          operating_system: netbsd
          version: 9.3
          shell: bash
          run: |
            run() {
              printf "\033[0;35m==>\033[0m \033[0;32m%b\n\033[0m" "\$*"
              eval "\$@"
            }

            run sudo pkgin -y update
            run sudo pkgin -y install curl gmake

            run export SSL_CERT_FILE="\$PWD/cacert.pem"

            if [ \${{ matrix.pkg }} = xmakexx ] ; then
                run curl -LO https://github.com/xmake-io/xmake/releases/download/v2.9.4/xmake-v2.9.4.tar.gz
                run tar xf xmake-v2.9.4.tar.gz
                run cd xmake-v2.9.4
                run ./configure
                run gmake
                run gmake install PREFIX=/usr/local
                run cd -
            fi

            if [ \${{ matrix.pkg }} = xmake ] ; then
                curl -fsSL https://xmake.io/shget.text | bash
            fi

            run curl -LO https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
            run chmod +x ppkg

            run ./ppkg about
            run ./ppkg setup --syspm
            run ./ppkg update

            ln -sf ~/.ppkg/repos.d/official-core/formula/python@3.11.yml ~/.ppkg/repos.d/official-core/formula/python3.yml
            ln -sf ~/.ppkg/repos.d/official-core/formula/glib@2.78.yml   ~/.ppkg/repos.d/official-core/formula/glib.yml
            ln -sf ~/.ppkg/repos.d/official-core/formula/gobject-introspection@1.76.yml ~/.ppkg/repos.d/official-core/formula/gobject-introspection.yml

            run ./ppkg install \${{ matrix.pkg }}

            for item in \$(./ppkg ls-installed)
            do
                ./ppkg pack "\$item"

                PACKAGE_SUMMARY="\$(./ppkg info-installed "\$item" summary)"
                PACKAGE_WEB_URL="\$(./ppkg info-installed "\$item" web-url)"
                PACKAGE_VERSION="\$(./ppkg info-installed "\$item" version)"

                PACKAGE_NAME="\${item#*/}"

                PACKAGE_FILENAME="\$(ls \$PACKAGE_NAME-\$PACKAGE_VERSION-*.tar.xz)"

                PACKAGE_BIN_SHA="\$(./ppkg run sha256sum "\$PACKAGE_FILENAME" | cut -d ' ' -f1)"

                PACKAGE_BIN_URL="https://github.com/\${{ github.repository }}/releases/download/@TAGNAME@/\$PACKAGE_FILENAME"

                cat > "\$PACKAGE_NAME.yml" <<EOF
            summary: \$PACKAGE_SUMMARY
            webpage: \$PACKAGE_WEB_URL
            version: \$PACKAGE_VERSION
            bin-url: \$PACKAGE_BIN_URL
            bin-sha: \$PACKAGE_BIN_SHA
            EOF
            done

      - run: ls

      - uses: actions/upload-artifact@v4
        with:
          name: \${{ matrix.pkg }}
          path: |
            ./*.tar.xz
            ./*.yml
EOF

        unset ITEMS

        if [ -z "$NEEDS" ] ; then
            NEEDS="build$I"
        else
            NEEDS="$NEEDS, build$I"
        fi
    fi
done

cat >> .github/workflows/publish.yml <<EOF

  publish:
    needs: [$NEEDS]

EOF

cat >> .github/workflows/publish.yml < foot
